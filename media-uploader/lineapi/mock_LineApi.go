// Code generated by mockery v2.36.0. DO NOT EDIT.

package lineapi

import (
	io "io"

	model "github.com/CS20-SIT/Graduation-Bot/media-uploader/model"
	mock "github.com/stretchr/testify/mock"
)

// MockLineApi is an autogenerated mock type for the LineApi type
type MockLineApi struct {
	mock.Mock
}

type MockLineApi_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLineApi) EXPECT() *MockLineApi_Expecter {
	return &MockLineApi_Expecter{mock: &_m.Mock}
}

// GetContent provides a mock function with given fields: messageId, accessToken
func (_m *MockLineApi) GetContent(messageId string, accessToken string) (io.ReadCloser, string, error) {
	ret := _m.Called(messageId, accessToken)

	var r0 io.ReadCloser
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (io.ReadCloser, string, error)); ok {
		return rf(messageId, accessToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(messageId, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(messageId, accessToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(messageId, accessToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLineApi_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type MockLineApi_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
//   - messageId string
//   - accessToken string
func (_e *MockLineApi_Expecter) GetContent(messageId interface{}, accessToken interface{}) *MockLineApi_GetContent_Call {
	return &MockLineApi_GetContent_Call{Call: _e.mock.On("GetContent", messageId, accessToken)}
}

func (_c *MockLineApi_GetContent_Call) Run(run func(messageId string, accessToken string)) *MockLineApi_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockLineApi_GetContent_Call) Return(_a0 io.ReadCloser, _a1 string, _a2 error) *MockLineApi_GetContent_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLineApi_GetContent_Call) RunAndReturn(run func(string, string) (io.ReadCloser, string, error)) *MockLineApi_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetContentStatus provides a mock function with given fields: messageId, accessToken
func (_m *MockLineApi) GetContentStatus(messageId string, accessToken string) (model.TranscodingStatus, error) {
	ret := _m.Called(messageId, accessToken)

	var r0 model.TranscodingStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (model.TranscodingStatus, error)); ok {
		return rf(messageId, accessToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) model.TranscodingStatus); ok {
		r0 = rf(messageId, accessToken)
	} else {
		r0 = ret.Get(0).(model.TranscodingStatus)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(messageId, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLineApi_GetContentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContentStatus'
type MockLineApi_GetContentStatus_Call struct {
	*mock.Call
}

// GetContentStatus is a helper method to define mock.On call
//   - messageId string
//   - accessToken string
func (_e *MockLineApi_Expecter) GetContentStatus(messageId interface{}, accessToken interface{}) *MockLineApi_GetContentStatus_Call {
	return &MockLineApi_GetContentStatus_Call{Call: _e.mock.On("GetContentStatus", messageId, accessToken)}
}

func (_c *MockLineApi_GetContentStatus_Call) Run(run func(messageId string, accessToken string)) *MockLineApi_GetContentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockLineApi_GetContentStatus_Call) Return(_a0 model.TranscodingStatus, _a1 error) *MockLineApi_GetContentStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLineApi_GetContentStatus_Call) RunAndReturn(run func(string, string) (model.TranscodingStatus, error)) *MockLineApi_GetContentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLineApi creates a new instance of MockLineApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLineApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLineApi {
	mock := &MockLineApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

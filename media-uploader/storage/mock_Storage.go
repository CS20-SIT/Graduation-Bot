// Code generated by mockery v2.36.0. DO NOT EDIT.

package storage

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Upload provides a mock function with given fields: metadata, content
func (_m *MockStorage) Upload(metadata UploadMetadata, content io.Reader) error {
	ret := _m.Called(metadata, content)

	var r0 error
	if rf, ok := ret.Get(0).(func(UploadMetadata, io.Reader) error); ok {
		r0 = rf(metadata, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockStorage_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - metadata UploadMetadata
//   - content io.Reader
func (_e *MockStorage_Expecter) Upload(metadata interface{}, content interface{}) *MockStorage_Upload_Call {
	return &MockStorage_Upload_Call{Call: _e.mock.On("Upload", metadata, content)}
}

func (_c *MockStorage_Upload_Call) Run(run func(metadata UploadMetadata, content io.Reader)) *MockStorage_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(UploadMetadata), args[1].(io.Reader))
	})
	return _c
}

func (_c *MockStorage_Upload_Call) Return(_a0 error) *MockStorage_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_Upload_Call) RunAndReturn(run func(UploadMetadata, io.Reader) error) *MockStorage_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
